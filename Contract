// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract PatientRecords {
    struct PatientRecord {
        string name;
        uint age;
        string diagnosis;
        string treatment;
        bool exists; // flag to check if the record exists
    }

    mapping(address => PatientRecord) private patientRecords;
    mapping(address => address[]) private authorizedAccess;

    address public owner;

    // Declare events
    event RecordStored(address indexed patientAddress, string name);
    event AccessAuthorized(address indexed patientAddress, address indexed authorizedPerson);
    event AccessRevoked(address indexed patientAddress, address indexed revokedPerson);
    event RecordViewed(address indexed viewer, address indexed patientAddress);
    event RecordDeleted(address indexed patientAddress);

    constructor() {
        owner = msg.sender; // The contract deployer is the owner
    }

    // Modifier to ensure only the patient or authorized person can access the record
    modifier onlyOwnerOrAuthorized(address patient) {
        require(msg.sender == patient || isAuthorized(patient), "Not authorized");
        _;
    }

    // Store a patient's record
    function storeRecord(
        address patientAddress,
        string memory name,
        uint age,
        string memory diagnosis,
        string memory treatment
    ) public {
        require(msg.sender == owner, "Only the owner can store records");

        patientRecords[patientAddress] = PatientRecord(name, age, diagnosis, treatment, true); // Shorthand initialization

        emit RecordStored(patientAddress, name); // Emit event on record store
    }

    // Authorize access to the record
    function authorizeAccess(address patient, address authorizedPerson) public {
        require(msg.sender == patient, "Only the patient can authorize access");
        authorizedAccess[patient].push(authorizedPerson);

        emit AccessAuthorized(patient, authorizedPerson); // Emit event on access authorization
    }

    // Revoke authorized access
    function revokeAccess(address patient, address authorizedPerson) public {
        require(msg.sender == patient, "Only the patient can revoke access");

        // Remove the authorized person from the list of authorized addresses
        address[] storage authorized = authorizedAccess[patient];
        for (uint i = 0; i < authorized.length; i++) {
            if (authorized[i] == authorizedPerson) {
                authorized[i] = authorized[authorized.length - 1];
                authorized.pop();
                break;
            }
        }

        emit AccessRevoked(patient, authorizedPerson); // Emit event on access revocation
    }

    // Check if an address is authorized to access a patient's record
    function isAuthorized(address patient) public view returns (bool) {
        address[] memory authorized = authorizedAccess[patient];
        for (uint i = 0; i < authorized.length; i++) {
            if (authorized[i] == msg.sender) {
                return true;
            }
        }
        return false;
    }

    // View a patient's record if authorized
    function viewRecord(address patientAddress) public onlyOwnerOrAuthorized(patientAddress) returns (string memory name, uint age, string memory diagnosis, string memory treatment) {
        require(patientRecords[patientAddress].exists, "Record does not exist");

        PatientRecord memory record = patientRecords[patientAddress];
        emit RecordViewed(msg.sender, patientAddress); // Emit event on record view
        return (record.name, record.age, record.diagnosis, record.treatment);
    }

    // Delete a patient's record
    function deleteRecord(address patientAddress) public {
        require(msg.sender == patientAddress || msg.sender == owner, "Only the patient or owner can delete the record");
        require(patientRecords[patientAddress].exists, "Record does not exist");

        delete patientRecords[patientAddress]; // Delete the record
        emit RecordDeleted(patientAddress); // Emit event on record deletion
    }
}
